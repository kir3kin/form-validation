{"version":3,"sources":["form/formSlice.ts","app/formAPI.ts","app/store.ts","app/hooks.ts","form/InputAlert.tsx","form/Input.tsx","components/Loader.tsx","form/Form.tsx","app/defaultValidPatters.ts","App.tsx","index.tsx"],"names":["logIn","createAsyncThunk","emptyStoreInputs","thunkAPI","a","Promise","resolve","setTimeout","data","response","dispatch","hideLogStatus","formSlice","createSlice","name","initialState","inputs","loading","formDisable","msg","status","reducers","changeInput","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectState","form","store","configureStore","reducer","formReducer","useAppSelector","useSelector","InputAlert","text","className","Input","id","type","value","label","inputHandler","storeInputs","inputAlert","labelClassName","inputClassName","defaultInput","isValid","isChecked","trim","push","inputStatus","join","onChange","event","disabled","htmlFor","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","Loader","Form","useDispatch","logInData","useRegister","pattern","defaultValue","newInput","toString","useEffect","validateInput","input","inputPattern","RegExp","email","password","tel","test","inputValue","target","inputType","inputName","onSubmit","preventDefault","errors","collection","Object","keys","map","tempInput","content","length","newStoreInputs","submitHandler","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.98fddd58.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { sendFormData } from '../app/formAPI'\r\nimport { RootState } from '../app/store'\r\nimport { iInputType } from '../interfaces/interfaces'\r\n\r\ninterface iFormState {\r\n  inputs: iInputType\r\n  loading: boolean\r\n  formDisable: boolean\r\n  logIn: {\r\n    msg: string\r\n    status: 'logged' | 'not logged'\r\n  }\r\n}\r\nconst initialState: iFormState = {\r\n  inputs: {},\r\n  loading: false,\r\n  formDisable: false,\r\n  logIn: {\r\n    msg: '',\r\n    status: 'not logged'\r\n  }\r\n}\r\n\r\nexport const logIn = createAsyncThunk(\r\n  'form/sendFormData',\r\n  async (emptyStoreInputs: iInputType, thunkAPI) => {\r\n    const response = await sendFormData()\r\n    thunkAPI.dispatch(hideLogStatus())\r\n    return {\r\n      data: response.data,\r\n      emptyStoreInputs\r\n    }\r\n  }\r\n)\r\n\r\nexport const hideLogStatus = createAsyncThunk(\r\n  'form/hideLogStatus',\r\n  async () => {\r\n    await new Promise<string>((resolve) =>\r\n      setTimeout(() => resolve(''), 2000)\r\n    )\r\n  }\r\n)\r\n\r\nexport const formSlice = createSlice({\r\n  name: 'form',\r\n  initialState,\r\n  reducers: {\r\n    changeInput(\r\n      state,\r\n      action: PayloadAction<iInputType>\r\n    ) {\r\n      state.inputs = {\r\n        ...state.inputs,\r\n        ...action.payload\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(logIn.pending, state => {\r\n        state.loading = true\r\n        state.formDisable= true\r\n      })\r\n      .addCase(logIn.fulfilled, (state, action) => {\r\n        state.loading = false\r\n        state.formDisable = false\r\n        state.inputs = {\r\n          ...state.inputs,\r\n          ...action.payload.emptyStoreInputs\r\n        }\r\n        state.logIn = {\r\n          msg: action.payload.data,\r\n          status: 'logged'\r\n        }\r\n      })\r\n      .addCase(hideLogStatus.fulfilled, state => {\r\n        state.logIn.status = 'not logged'\r\n      })\r\n  },\r\n})\r\n\r\nexport const { changeInput } = formSlice.actions\r\n\r\nexport const selectState = (state: RootState) => {\r\n  return {\r\n    inputs: state.form.inputs,\r\n    loading: state.form.loading,\r\n    formDisable: state.form.formDisable,\r\n    logIn: state.form.logIn\r\n  }\r\n}\r\n\r\nexport default formSlice.reducer","export function sendFormData() {\r\n  return new Promise<{ data: string }>((resolve) =>\r\n    setTimeout(() => resolve({ data: 'You are loged in' }), 2000)\r\n  )\r\n}\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport formReducer from '../form/formSlice'\n\nexport const store = configureStore({\n  reducer: {\n    form: formReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\"\r\n\r\ntype inputAlertProps = {\r\n\ttext: string\r\n}\r\nexport const InputAlert: React.FC<inputAlertProps> = ({text}) => {\r\n\treturn (\r\n\t\t<div className=\"item__alert note\">{text}</div>\r\n\t)\r\n}\r\n\r\n","import React from \"react\"\r\nimport { InputAlert } from \"./InputAlert\"\r\nimport { inputProps } from \"../interfaces/interfaces\"\r\nimport { useAppSelector } from \"../app/hooks\"\r\nimport { selectState } from \"./formSlice\"\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nexport const Input: React.FC<inputProps> = ({\r\n\tid,\r\n\tname,\r\n\ttype,\r\n\tvalue,\r\n\tlabel,\r\n\tinputHandler\r\n}) => {\r\n\tconst {formDisable, inputs: storeInputs} = useAppSelector(selectState)\r\n\t// default options\r\n\tlet inputAlert = false\r\n\tconst labelClassName: string[] = ['item__label']\r\n\tconst inputClassName: string[] = ['item__input']\r\n\r\n\tconst defaultInput = {\r\n\t\tid: id ? id : name,\r\n\t\tlabel: label ? label : `User ${type}`,\r\n\t\tvalue: storeInputs[name] ? storeInputs[name].value : value,\r\n\t\tisValid: storeInputs[name] ? storeInputs[name].isValid : false,\r\n\t\tisChecked: storeInputs[name] ? storeInputs[name].isChecked : false\r\n\t}\r\n\r\n\r\n\t// label classes\r\n\tdefaultInput.value.trim() && labelClassName.push('item__label--active')\r\n\r\n\t// input classes\r\n\tlet inputStatus = defaultInput.isChecked ? (defaultInput.isValid ? 'success' : 'warning' ) : '' \r\n\tinputClassName.push(`item__input--${inputStatus}`)\r\n\r\n\t// input alert\r\n\tif(defaultInput.isChecked && !defaultInput.isValid) {\r\n\t\tinputAlert = true\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"form__item item\">\r\n\t\t\t<input\r\n\t\t\t\tid={defaultInput.id}\r\n\t\t\t\tname={name}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tvalue={defaultInput.value}\r\n\t\t\t\tclassName={inputClassName.join(' ')}\r\n\t\t\t\tonChange={event => inputHandler(event)}\r\n\t\t\t\tdisabled={formDisable}\r\n\t\t\t/>\r\n\t\t\t<label\r\n\t\t\t\thtmlFor={defaultInput.id}\r\n\t\t\t\tclassName={labelClassName.join(' ')}\r\n\t\t\t>{defaultInput.label}</label>\r\n\t\t\t\r\n\t\t\t<CSSTransition\r\n\t\t\t\tin={inputAlert}\r\n\t\t\t\ttimeout={800}\r\n\t\t\t\tclassNames={'alert'}\r\n\t\t\t\tmountOnEnter\r\n\t\t\t\tunmountOnExit\r\n\t\t\t>\r\n\t\t\t\t<InputAlert\r\n\t\t\t\t\ttext={`Please, enter correct ${defaultInput.label}`}\r\n\t\t\t\t/>\r\n\t\t\t</CSSTransition>\r\n\t\t</div>\r\n\t)\r\n} ","import React from \"react\"\r\nimport '../assets/scss/loader.scss'\r\n\r\nexport const Loader: React.FC = () => <div className=\"form__loader\"><div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div></div>","import React, { useEffect } from \"react\"\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\"\r\nimport { defaultValidPatters } from \"../app/defaultValidPatters\"\r\nimport '../assets/scss/form.scss'\r\nimport { iInputContent, iInputType, inputFields } from \"../interfaces/interfaces\"\r\nimport { changeInput, logIn, selectState } from \"./formSlice\"\r\nimport { Input } from \"./Input\"\r\nimport { Loader } from \"../components/Loader\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\n\r\nexport const Form: React.FC = () => {\r\n\tconst dispatch = useAppDispatch()\r\n\tconst {formDisable, loading, logIn: logInData, inputs: storeInputs} = useAppSelector(selectState)\r\n\r\n\tconst useRegister = (name: string, type: inputFields, pattern?: string, defaultValue: string = '') => {\r\n\r\n\t\tconst newInput: iInputType = {\r\n\t\t\t[name]: {\r\n\t\t\t\ttype,\r\n\t\t\t\tvalue: defaultValue,\r\n\t\t\t\tpattern: pattern ? pattern.toString() : '',\r\n\t\t\t\tisValid: false,\r\n\t\t\t\tisChecked: false\r\n\t\t\t}\r\n\t\t}\r\n\t\tuseEffect(() => {\r\n\t\t\tdispatch(changeInput(newInput))\r\n\t\t}, [])\r\n\r\n\t\treturn {\r\n\t\t\tname,\r\n\t\t\ttype,\r\n\t\t\tvalue: defaultValue,\r\n\t\t\tinputHandler\r\n\t\t}\r\n\t}\r\n\r\n\tconst validateInput = (input: iInputContent): void => {\r\n\t\tconst inputPattern: RegExp = input.pattern ? new RegExp(input.pattern) : defaultValidPatters(input.type)\r\n\t\tinput.isValid = inputPattern.test(input.value)\r\n\t\tinput.isChecked = true\r\n\t}\r\n\t\r\n\tconst inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst inputValue = event.target.value\r\n\t\tconst inputType = event.target.type\r\n\t\tconst inputName = event.target.name\r\n\t\tconst newInput: iInputType = {\r\n\t\t\t[inputName]: {\r\n\t\t\t\ttype: inputType,\r\n\t\t\t\tvalue: inputValue,\r\n\t\t\t\tpattern: storeInputs[inputName].pattern\r\n\t\t\t}\r\n\t\t}\r\n\t\tvalidateInput(newInput[inputName])\r\n\t\tdispatch(changeInput(newInput))\r\n\t}\r\n\r\n\tconst submitHandler = (event: React.FormEvent) => {\r\n\t\tevent.preventDefault()\r\n\t\ttype errorsType = {\r\n\t\t\tname: string\r\n\t\t\tcontent: iInputContent\r\n\t\t}\r\n\t\tconst errors: errorsType[] = []\r\n\t\tconst collection: errorsType[] = []\r\n\r\n\t\tObject.keys(storeInputs).map(input => {\r\n\t\t\tlet tempInput = {\r\n\t\t\t\tname: input,\r\n\t\t\t\tcontent : {...storeInputs[input]}\r\n\t\t\t}\r\n\t\t\tif (!storeInputs[input].isChecked || !storeInputs[input].isValid) {\r\n\t\t\t\terrors.push(tempInput)\r\n\t\t\t} else {\r\n\t\t\t\tcollection.push(tempInput)\r\n\t\t\t}\r\n\t\t\treturn input\r\n\t\t})\r\n\r\n\t\tif (errors.length) {\r\n\t\t\terrors.map(input => {\r\n\t\t\t\tvalidateInput(input.content)\r\n\t\t\t\tdispatch(changeInput({[input.name]: input.content}))\r\n\t\t\t\treturn input\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tlet newStoreInputs: iInputType = {}\r\n\t\t\tcollection.map(input => {\r\n\t\t\t\tinput.content = {\r\n\t\t\t\t\t...input.content,\r\n\t\t\t\t\t...{\r\n\t\t\t\t\t\tvalue: '',\r\n\t\t\t\t\t\tisChecked: false,\r\n\t\t\t\t\t\tisValid: false\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnewStoreInputs = {\r\n\t\t\t\t\t...newStoreInputs,\r\n\t\t\t\t\t...{[input.name]: input.content}\r\n\t\t\t\t}\r\n\t\t\t\treturn input\r\n\t\t\t})\r\n\t\t\tdispatch(logIn(newStoreInputs))\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\tclassName=\"form\"\r\n\t\tonSubmit={event => submitHandler(event)}\r\n\t\t>\r\n\t\t\t<div className=\"form__wrapper\">\r\n\t\t\t\t<CSSTransition\r\n\t\t\t\t\tin={logInData.status === 'logged'}\r\n\t\t\t\t\ttimeout={800}\r\n\t\t\t\t\tclassNames={'alert'}\r\n\t\t\t\t\tmountOnEnter\r\n\t\t\t\t\tunmountOnExit\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className=\"form__info\">{logInData.msg}</div>\r\n\t\t\t\t</CSSTransition>\r\n\r\n\t\t\t\t<h2 className=\"form__header\">Log in</h2>\r\n\t\t\t\t<div className=\"form__body\">\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tid=\"user-email\"\r\n\t\t\t\t\t\tlabel=\"email\"\r\n\t\t\t\t\t\t{...useRegister(\"user_email\", \"email\")}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tid=\"user-phone\"\r\n\t\t\t\t\t\tlabel=\"phone number\"\r\n\t\t\t\t\t\t{...useRegister(\"user_phone\", \"tel\")}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tid=\"user-password\"\r\n\t\t\t\t\t\tlabel=\"password\"\r\n\t\t\t\t\t\t{...useRegister(\"user_password\", \"password\", '^[\\\\w!?@()&$-]{10,20}$')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<CSSTransition\r\n\t\t\t\t\t\tin={loading}\r\n\t\t\t\t\t\ttimeout={800}\r\n\t\t\t\t\t\tclassNames={'alert'}\r\n\t\t\t\t\t\tmountOnEnter\r\n\t\t\t\t\t\tunmountOnExit\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Loader />\r\n\t\t\t\t\t</CSSTransition>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\tdisabled={formDisable}\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tclassName=\"form__button\"\r\n\t\t\t\t\t>Send</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}","type validPatternsProps = (type: string) => RegExp\r\n\r\nexport const defaultValidPatters: validPatternsProps = type => {\r\n\t// const validTypes: Record<inputFields, RegExp> = {\r\n\tconst validTypes: Record<string, RegExp> = {\r\n    email: /^\\w+@\\w+(\\.[a-z]+)+$/i,\r\n    password: /^[\\w!?@()&$-]{8,20}$/,\r\n    tel: /^\\d{3}-?\\d{3}-?\\d{3}$/,\r\n  }\r\n  return validTypes[type]\r\n}","import React from 'react'\nimport { Form } from './form/Form'\n\nexport const App: React.FC = () => <Form />","import React from 'react'\nimport { render } from 'react-dom'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport { App } from './App'\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}